/************************************************************************/
/*																		*/
/*	video_demo.c	--	ZYBO Video demonstration 						*/
/*																		*/
/************************************************************************/
/*	Author: Sam Bobrowicz												*/
/*	Copyright 2015, Digilent Inc.										*/
/************************************************************************/
/*  Module Description: 												*/
/*																		*/
/*		This file contains code for running a demonstration of the		*/
/*		Video input and output capabilities on the ZYBO. It is a good	*/
/*		example of how to properly use the display_ctrl and				*/
/*		video_capture drivers.											*/
/*																		*/
/*																		*/
/************************************************************************/
/*  Revision History:													*/
/* 																		*/
/*		11/25/2015(SamB): Created										*/
/*																		*/
/************************************************************************/

/* ------------------------------------------------------------ */
/*				Include File Definitions						*/
/* ------------------------------------------------------------ */

#include "video_demo.h"		// our structure and prodecure definitions is in here
#include "display_ctrl/display_ctrl.h"
#include "intc/intc.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xil_exception.h"
#include "xparameters.h"
#include "interrupts.h"		//intterupts lib
#include "xtime_l.h"
#include "sd_card.h"
//include "sprites.h"



/* ------------------------------------------------------------ */
/*				Defines	macro definitions						*/
/* ------------------------------------------------------------ */

/*
 * XPAR redefines
 */
#define DYNCLK_BASEADDR XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID XPAR_AXIVDMA_0_DEVICE_ID
#define DISP_VTC_ID XPAR_VTC_0_DEVICE_ID
#define VID_VTC_IRPT_ID XPS_FPGA3_INT_ID
#define VID_GPIO_IRPT_ID XPS_FPGA4_INT_ID
#define SCU_TIMER_ID XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR



/*
 * Timer definitons
 */
#define TMR_LOAD				833333 //counts per millisecond
#define INTC_TMR_INTERRUPT_ID 	XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR
#define TMR_DEVICE				XPAR_TMRCTR_0_DEVICE_ID



/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */


/*
 * Framebuffers for video/vga data out
 */
u8 frameBufA[DEMO_MAX_FRAME];	//front-buffer (read from)
u8 frameBufB[DEMO_MAX_FRAME];	//back-buffer (write to)
u8 *ptr_frameBufA;
u8 *ptr_frameBufB;

Enemy alienNest[30];		//array of 30 aliens
Hero heroArr[1];				//array of heros (curently just 1)

u8 opt;
//sint32 move;
//u32 push;
u8 step;

/*
 * Display and Video Driver structs
 */
DisplayCtrl dispCtrl;
XAxiVdma vdma;
INTC intc;
char fRefresh; //flag used to trigger a refresh of the Menu on video detect



int main(void)
{
	//test
	u8 i;
	i=0;

	//push = 0;
	step = 0;

	/* Interrupt initialization */
	int status;
	// Initialize Push Buttons
	    status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	    if(status != XST_SUCCESS) return XST_FAILURE;

	    // Set all buttons direction to inputs
	        XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

	        status = IntcInitFunction(INTC_DEVICE_ID, &BTNInst);
	        if(status != XST_SUCCESS) return XST_FAILURE;



	DemoInitialize();						// init device drivers for screen
	ptr_frameBufB = frameBufB;				//set pointer to back-buffer

	while(1){

		DefineHero(heroArr, dispCtrl.vMode.width, dispCtrl.vMode.height, 0);
		DrawFrame(1, ptr_frameBufB, dispCtrl.vMode.width , dispCtrl.vMode.height, DEMO_STRIDE);	//draw frame into back-buffer

		DefineAlien(alienNest, dispCtrl.vMode.width, dispCtrl.vMode.height, i);
		DrawFrame(2, ptr_frameBufB, dispCtrl.vMode.width , dispCtrl.vMode.height, DEMO_STRIDE);

		SwapBuf();																				//copy back-buffer into front-buffer
		if(i>1000){
			i = 0;
		}else {i++;}
		TimerDelay(10000);
	}
	
	return 0;
}
void BTN_Intr_Handler(void *InstancePtr)
{
	// Disable GPIO interrupts
	XGpio_InterruptDisable(&BTNInst, BTN_INT);
	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) !=
			BTN_INT) {
			return;
		}

	btns = XGpio_DiscreteRead(&BTNInst, 1);

	// first button from right on the zybo
	if(btns == button1){
		//push += 10;
		step +=10;
		//TimerDelay(10000);
	}

	// second btn
	if(btns == button2){}

	// 3..
	if(btns == button3){}

	// and yeah
	if(btns == button4){
		//push -= 10;
		//step -= 10;
		//TimerDelay(10000);
	}


    (void)XGpio_InterruptClear(&BTNInst, BTN_INT);
    // Enable GPIO interrupts
    XGpio_InterruptEnable(&BTNInst, BTN_INT);
}

void DemoInitialize()
{
	int Status;
	XAxiVdma_Config *vdmaConfig;

	//initialize pointer to front-buffer (frameBufA)
	ptr_frameBufA = frameBufA;

	/*
	 * Initialize a timer used for a simple delay
	 */
	TimerInitialize(SCU_TIMER_ID);


	// Initialize VDMA driver
	vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
	if (!vdmaConfig)
	{
		xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (Status != XST_SUCCESS)
	{
		xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Display controller and start it
	 */
	Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR, &ptr_frameBufA, DEMO_STRIDE);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}
	Status = DisplayStart(&dispCtrl);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
		return;
	}

	return;
}

void SwapBuf(){

	int frameBufLen;
	frameBufLen = sizeof(frameBufB);

	memcpy(frameBufA, frameBufB, frameBufLen);							//copy frame from back-buffer to front-buffer
	memset(frameBufB, 0, frameBufLen);									//clear back-buffer
	Xil_DCacheFlushRange((unsigned int) frameBufA, DEMO_MAX_FRAME);		//print from  front-buffer

}
void DefineAlien(Enemy *alienArr, u32 width, u32 height, u8 step){

	u8 i;

	u32 wh;						//width/height of enemy (is quadratic)
	u32 offset;					//offset of enemy relative to the enemy on the left hand side
	u32 margin;					//margin for aliens from screen edges
	u8 alienArrLen;

	//init param
	alienArrLen = 30;

	margin = width/5;
	wh = (width-margin)/20;
	offset = (width-margin-(alienArrLen/3)*wh)/((alienArrLen/3)+1);


			//initialize alien positions in top of screen (3 rows with 10 aliens in each row)
			for(i=0; i<alienArrLen; i++){

				//control if player moves outside of canvas
						if(alienArr[i].ytop+step <= 0){
							step = 0;
						}
						else if(alienArr[i].ybtm+step >= 480){
							step = 0;
						} else {}

				if(i < 10){
					alienArr[i].xLeft = ((i+1)*3*offset+(3*margin/2)+i*3*wh);				//first row
					alienArr[i].xRight = alienArr[i].xLeft + 3*wh;
					alienArr[i].ytop = 0.125*height-0.5*wh+step;
					alienArr[i].ybtm = alienArr[i].ytop+wh;
				}else if(i < 20){
					alienArr[i].xLeft = ((i+1-10)*3*offset+(3*margin/2)+(i-10)*3*wh);		//second row
					alienArr[i].xRight = alienArr[i].xLeft + 3*wh;
					alienArr[i].ytop = 0.125*height-0.5*wh+2*wh+step;
					alienArr[i].ybtm = alienArr[i].ytop+wh;
				}else {
					alienArr[i].xLeft = ((i+1-20)*3*offset+(3*margin/2)+(i-20)*3*wh);		//third row
					alienArr[i].xRight = alienArr[i].xLeft + 3*wh;
					alienArr[i].ytop = 0.125*height-0.5*wh+4*wh+step;
					alienArr[i].ybtm = alienArr[i].ytop+wh;
				}
			}
}


void DefineHero(Hero *hero, u32 width, u32 height, u32 move){

	//u8 i;
	u8 wh;
	//u8 heroArrLen;

	wh = width/20;		//width/height of hero (quadratic)
	//heroArrLen = 1;


	//for(i=0; i<heroArrLen; i++){

		//control if player moves outside of canvas
		if(hero[0].xLeft+move >= 640*3){
			move = 0;
		}
		else if(hero[0].xLeft+move <= 0){
			move = 0;
		} else {}


		hero[0].xLeft = 3*0.5*(width-wh)+3*move;
		hero[0].xRight = hero[0].xLeft + wh;
		hero[0].ytop = height-wh;
		hero[0].ybtm = hero[0].ytop+wh;
	//}
}

void DrawFrame(u8 opt, u8 *frame, u32 width, u32 height, u32 stride){

		u8 i;
		u8 alienArrLen, heroArrLen;
		u32 wh;
		u32 margin;

		//screen
		u32 xcoi, ycoi;				//x,y coordinates of screen
		u32 iPixelAddr;				//running index of pixel addresses

		//Alien attributes
		u8 wRed, wBlue, wGreen;		//color of alien

			if(opt == 1){			//draw player

				//init param
				wRed = 0;
				wGreen = 255;
				wBlue = 0;
				heroArrLen = 1;
				margin = width/5;
				wh = (width-margin)/20;

				for(i=0; i<heroArrLen; i++){
					for(xcoi=0; xcoi<wh*3; xcoi+=3){
						iPixelAddr = (heroArr[i].ytop-1)*stride+heroArr[i].xLeft +xcoi;

						for(ycoi=0; ycoi<wh;ycoi++){
							frame[iPixelAddr] = wRed;
							frame[iPixelAddr+1] = wBlue;
							frame[iPixelAddr+2] = wGreen;

							iPixelAddr += stride;
						}
					}

				}
			}
			if(opt == 2){			//draw aliens

				//init param
				wRed = 255;
				wGreen = 255;
				wBlue = 255;
				alienArrLen = 30;
				margin = width/5;
				wh = (width-margin)/20;

				//checking for all aliens coordinates (in oppose for all pixels on screen)
				for(i=0;i<alienArrLen; i++){

					for(xcoi=0;xcoi<wh*3;xcoi+=3){
						iPixelAddr = (alienNest[i].ytop-1)*stride+alienNest[i].xLeft + xcoi;

						for(ycoi=0;ycoi<wh;ycoi++){

							frame[iPixelAddr] = wGreen;
							frame[iPixelAddr+1] = wBlue;
							frame[iPixelAddr+2] = wRed;

							iPixelAddr += stride;
						}
					}
				}

			}
}

/*
void DrawHero(Hero hero, u8 *frame, u32 width, u32 height, u32 stride, u8 step){


		u32 alienArrLen;

		//screen
		u32 xcoi, ycoi;				//x,y coordinates of screen
		u32 iPixelAddr;				//running index of pixel addresses

		//Alien attributes
		u8 wRed, wBlue, wGreen;		//color of alien
		u32 wh;						//width/height of enemy (is quadratic)
		u32 offset;					//offset of enemy relative to the enemy on the left hand side
		u32 margin;					//margin for aliens from screen edges

		//init param
		wRed = 255;
		wGreen = 255;
		wBlue = 255;

		alienArrLen = 30;

		margin = width/5;
		wh = (width-margin)/20;
		offset = (width-margin-(alienArrLen/3)*wh)/((alienArrLen/3)+1);

		hero.xLeft = ((-11+step)*3*offset+(3*margin/2)+(20)*3*wh);		//third row
		hero.xRight = hero.xLeft + 3*wh;
		hero.ytop = 0.7*height-0.5*wh+4*wh;
		hero.ybtm = hero.ytop+wh;

				//checking for all aliens coordinates (in oppose for all pixels on screen)

		for(xcoi=0;xcoi<wh*3;xcoi+=3){
			iPixelAddr = (hero.ytop)*stride+hero.xLeft + xcoi;		//

			for(ycoi=0;ycoi<wh;ycoi++){

				frame[iPixelAddr] = wGreen;
				frame[iPixelAddr+3] = wBlue;
				frame[iPixelAddr+6] = wRed;

				iPixelAddr += stride;
			}
		}

}
*/



//void Move(u8 *frame) {
//	switch(btns) {
//	case 1:
//		jumperBlock.x -= DEMO_STRIDE*21;
//		if (jumperBlock.velocity < 0){
//			jumperDir = DR;
//		}else  {
//			jumperDir = UR;}
//		break;
//	case 2:
//		jumperBlock.x -= DEMO_STRIDE*3;
//		break;
//	case 4:
//		jumperBlock.x += DEMO_STRIDE*3;
//		break;
//	case 8:
//		jumperBlock.x += DEMO_STRIDE*21;
//		if (jumperBlock.velocity < 0){
//					jumperDir = DL;
//				}else  {
//					jumperDir = UL;}
//		break;
//	default:
//		break;
//
//	}
