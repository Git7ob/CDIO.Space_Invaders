/************************************************************************/
/*																		*/
/*	video_demo.c	--	ZYBO Video demonstration 						*/
/*																		*/
/************************************************************************/
/*	Author: Sam Bobrowicz												*/
/*	Copyright 2015, Digilent Inc.										*/
/************************************************************************/
/*  Module Description: 												*/
/*																		*/
/*		This file contains code for running a demonstration of the		*/
/*		Video input and output capabilities on the ZYBO. It is a good	*/
/*		example of how to properly use the display_ctrl and				*/
/*		video_capture drivers.											*/
/*																		*/
/*																		*/
/************************************************************************/
/*  Revision History:													*/
/* 																		*/
/*		11/25/2015(SamB): Created										*/
/*																		*/
/************************************************************************/

/* ------------------------------------------------------------ */
/*				Include File Definitions						*/
/* ------------------------------------------------------------ */

#include "video_demo.h"
#include "display_ctrl/display_ctrl.h"
#include "intc/intc.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xparameters.h"

/*
 * XPAR redefines
 */
#define DYNCLK_BASEADDR XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID XPAR_AXIVDMA_0_DEVICE_ID
#define DISP_VTC_ID XPAR_VTC_0_DEVICE_ID
#define VID_VTC_IRPT_ID XPS_FPGA3_INT_ID
#define VID_GPIO_IRPT_ID XPS_FPGA4_INT_ID
#define SCU_TIMER_ID XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR


/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * Display and Video Driver structs
 */
DisplayCtrl dispCtrl;
XAxiVdma vdma;
INTC intc;
char fRefresh; //flag used to trigger a refresh of the Menu on video detect

Alien alienNest[30];		//array of 30 aliens
u8 step;

/*
 * Framebuffers for video data: frameBufA is front-buffer (here we read from) frameBufB is back-buffer (here we write to)
 * which currently only supports one frame at a time
 */
u8 frameBufA[DEMO_MAX_FRAME];
u8 frameBufB[DEMO_MAX_FRAME];
u8 *ptr_frameBufA;
u8 *ptr_frameBufB;


/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */

int main(void)
{
	step = 0;
	// Initialize Push Buttons
	    status = XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);
	    if(status != XST_SUCCESS) return XST_FAILURE;

	    // Set all buttons direction to inputs
	        XGpio_SetDataDirection(&BTNInst, 1, 0xFF);
	DemoInitialize();
	ptr_frameBufB = frameBufB;			//set pointer to back-buffer

	while(1){

			DrawFrame(alienNest, ptr_frameBufB, dispCtrl.vMode.width , dispCtrl.vMode.height, DEMO_STRIDE, step);	//draw frame into back-buffer)
			SwapBuf();																								//copy back-buffer into front-buffer

			//update alien movement
			if(step > 200) {
				step = 0;
			}
			step += 1;

			TimerDelay(10000);

	}
	return 0;
}


void DemoInitialize()
{
	int Status;
	XAxiVdma_Config *vdmaConfig;

	//initialize pointer to front-buffer (frameBufA)
	ptr_frameBufA = frameBufA;

	/*
	 * Initialize a timer used for a simple delay
	 */
	TimerInitialize(SCU_TIMER_ID);


	// Initialize VDMA driver
	vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
	if (!vdmaConfig)
	{
		xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (Status != XST_SUCCESS)
	{
		xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Display controller and start it
	 */
	Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR, &ptr_frameBufA, DEMO_STRIDE); //initialize display controller to frameBufA
	if (Status != XST_SUCCESS)
	{
		xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}
	Status = DisplayStart(&dispCtrl);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
		return;
	}

	return;
}


void DrawFrame(Alien *alienArr, u8 *frame, u32 width, u32 height, u32 stride, u8 step){

		u8 i;
		u32 alienArrLen;

		//screen
		u32 xcoi, ycoi;				//x,y coordinates of screen
		u32 iPixelAddr;				//running index of pixel addresses

		//Alien attributes
		u8 wRed, wBlue, wGreen;		//color of alien
		u32 wh;						//width/height of enemy (is quadratic)
		u32 offset;					//offset of enemy relative to the enemy on the left hand side
		u32 margin;					//margin for aliens from screen edges

		//init param
		wRed = 255;
		wGreen = 255;
		wBlue = 255;

		alienArrLen = 30;

		margin = width/5;
		wh = (width-margin)/20;
		offset = (width-margin-(alienArrLen/3)*wh)/((alienArrLen/3)+1);

				//initialize alien positions in top of screen (3 rows with 10 aliens in each row)
				for(i=0; i<alienArrLen; i++){
					if(i < 10){
						alienArr[i].xLeft = ((i+1)*3*offset+(3*margin/2)+i*3*wh);				//first row
						alienArr[i].xRight = alienArr[i].xLeft + 3*wh;
						alienArr[i].ytop = 0.125*height-0.5*wh+step;
						alienArr[i].ybtm = alienArr[i].ytop+wh;
					}else if(i < 20){
						alienArr[i].xLeft = ((i+1-10)*3*offset+(3*margin/2)+(i-10)*3*wh);		//second row
						alienArr[i].xRight = alienArr[i].xLeft + 3*wh;
						alienArr[i].ytop = 0.125*height-0.5*wh+2*wh+step;
						alienArr[i].ybtm = alienArr[i].ytop+wh;
					}else {
						alienArr[i].xLeft = ((i+1-20)*3*offset+(3*margin/2)+(i-20)*3*wh);		//third row
						alienArr[i].xRight = alienArr[i].xLeft + 3*wh;
						alienArr[i].ytop = 0.125*height-0.5*wh+4*wh+step;
						alienArr[i].ybtm = alienArr[i].ytop+wh;
					}
				}

				//checking for all aliens coordinates (in oppose for all pixels on screen)
				for(i=0;i<alienArrLen; i++){

					for(xcoi=0;xcoi<wh*3;xcoi+=3){
						iPixelAddr = (alienArr[i].ytop-1)*stride+alienArr[i].xLeft + xcoi;		//

						for(ycoi=0;ycoi<wh;ycoi++){

							frame[iPixelAddr] = wGreen;
							frame[iPixelAddr+1] = wBlue;
							frame[iPixelAddr+2] = wRed;

							iPixelAddr += stride;
						}
					}

				}
}


void SwapBuf(){
	int frameBufLen;
	frameBufLen = sizeof(frameBufB);

	memcpy(frameBufA, frameBufB, frameBufLen);							//copy frame from back-buffer to front-buffer
	memset(frameBufB, 0, frameBufLen);									//clear back-buffer
	Xil_DCacheFlushRange((unsigned int) frameBufA, DEMO_MAX_FRAME);		//print from  front-buffer

}

void DemoISR(void *callBackRef, void *pVideo)
{
	char *data = (char *) callBackRef;
	*data = 1; //set fRefresh to 1
}


